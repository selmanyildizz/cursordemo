{"ast":null,"code":"var _jsxFileName = \"/Users/selmanyildiz/cursordemo/src/components/EarthquakeMap.js\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './EarthquakeMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getMarkerIcon = magnitude => {\n  let color = '#48bb78'; // yeşil (küçük depremler)\n  if (magnitude >= 4.0) color = '#ecc94b'; // sarı\n  if (magnitude >= 5.0) color = '#f56565'; // kırmızı\n\n  return L.divIcon({\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 24px;\n        height: 24px;\n        border-radius: 12px;\n        border: 2px solid white;\n        box-shadow: 0 0 4px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: white;\n        font-weight: bold;\n        font-size: 12px;\n      \">\n        ${magnitude}\n      </div>\n    `,\n    className: 'custom-div-icon',\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n    popupAnchor: [0, -12]\n  });\n};\nfunction EarthquakeMap({\n  earthquakes\n}) {\n  const turkeyCenter = [39.0, 35.0];\n\n  // API verilerini kontrol et\n  console.log('Raw earthquakes data:', earthquakes);\n\n  // Koordinatları kontrol et ve geçerli olanları filtrele\n  const validEarthquakes = earthquakes.filter(quake => {\n    // Koordinatları kontrol et\n    const lat = parseFloat(quake.geojson.coordinates[1]);\n    const lng = parseFloat(quake.geojson.coordinates[0]);\n    return !isNaN(lat) && !isNaN(lng);\n  });\n  console.log('Valid earthquakes:', validEarthquakes);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: turkeyCenter,\n    zoom: 6,\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), validEarthquakes.map((quake, index) => {\n      // GeoJSON formatında koordinatlar [longitude, latitude] şeklinde gelir\n      const lat = parseFloat(quake.geojson.coordinates[1]);\n      const lng = parseFloat(quake.geojson.coordinates[0]);\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [lat, lng],\n        icon: getMarkerIcon(quake.mag),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: quake.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"B\\xFCy\\xFCkl\\xFCk:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 20\n              }, this), \" \", quake.mag]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Derinlik:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 20\n              }, this), \" \", quake.depth, \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Tarih:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 20\n              }, this), \" \", new Date(quake.date).toLocaleString('tr-TR')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = EarthquakeMap;\nexport default EarthquakeMap;\nvar _c;\n$RefreshReg$(_c, \"EarthquakeMap\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","getMarkerIcon","magnitude","color","divIcon","html","className","iconSize","iconAnchor","popupAnchor","EarthquakeMap","earthquakes","turkeyCenter","console","log","validEarthquakes","filter","quake","lat","parseFloat","geojson","coordinates","lng","isNaN","center","zoom","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","index","position","icon","mag","title","depth","Date","date","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/selmanyildiz/cursordemo/src/components/EarthquakeMap.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './EarthquakeMap.css';\n\nconst getMarkerIcon = (magnitude) => {\n  let color = '#48bb78'; // yeşil (küçük depremler)\n  if (magnitude >= 4.0) color = '#ecc94b'; // sarı\n  if (magnitude >= 5.0) color = '#f56565'; // kırmızı\n\n  return L.divIcon({\n    html: `\n      <div style=\"\n        background-color: ${color};\n        width: 24px;\n        height: 24px;\n        border-radius: 12px;\n        border: 2px solid white;\n        box-shadow: 0 0 4px rgba(0,0,0,0.3);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: white;\n        font-weight: bold;\n        font-size: 12px;\n      \">\n        ${magnitude}\n      </div>\n    `,\n    className: 'custom-div-icon',\n    iconSize: [24, 24],\n    iconAnchor: [12, 12],\n    popupAnchor: [0, -12],\n  });\n};\n\nfunction EarthquakeMap({ earthquakes }) {\n  const turkeyCenter = [39.0, 35.0];\n\n  // API verilerini kontrol et\n  console.log('Raw earthquakes data:', earthquakes);\n\n  // Koordinatları kontrol et ve geçerli olanları filtrele\n  const validEarthquakes = earthquakes.filter(quake => {\n    // Koordinatları kontrol et\n    const lat = parseFloat(quake.geojson.coordinates[1]);\n    const lng = parseFloat(quake.geojson.coordinates[0]);\n    return !isNaN(lat) && !isNaN(lng);\n  });\n\n  console.log('Valid earthquakes:', validEarthquakes);\n\n  return (\n    <MapContainer center={turkeyCenter} zoom={6} className=\"map-container\">\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {validEarthquakes.map((quake, index) => {\n        // GeoJSON formatında koordinatlar [longitude, latitude] şeklinde gelir\n        const lat = parseFloat(quake.geojson.coordinates[1]);\n        const lng = parseFloat(quake.geojson.coordinates[0]);\n        \n        return (\n          <Marker\n            key={index}\n            position={[lat, lng]}\n            icon={getMarkerIcon(quake.mag)}\n          >\n            <Popup>\n              <div>\n                <h3>{quake.title}</h3>\n                <p><strong>Büyüklük:</strong> {quake.mag}</p>\n                <p><strong>Derinlik:</strong> {quake.depth} km</p>\n                <p><strong>Tarih:</strong> {new Date(quake.date).toLocaleString('tr-TR')}</p>\n              </div>\n            </Popup>\n          </Marker>\n        );\n      })}\n    </MapContainer>\n  );\n}\n\nexport default EarthquakeMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}